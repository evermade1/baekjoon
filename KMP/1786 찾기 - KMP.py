'''
1786 찾기 - KMP
문자열 p에서 1부터 len(p)까지 접두사와 접미사가 일치하는 최대 길이를 pi배열에 저장한다
이후 탐색을 진행하면서 문자열이 끝까지 완성되지 않는 경우
일치하는 부분까지의 길이 x만큼 pi배열에서 확인하여 pi[x]만큼 건너갈 수 있다.
---------------------------------------------------------------------------------------------
pi배열 만드는 법:
j는 0에서, i는 1에서 시작한다.
같은 경우 i에 j 값+1을 넣어주고 j와 i 둘 다 한 칸 앞으로 이동시킨다.
다른 경우 j를 j-1이 가리키는 값(d[j-1])으로 이동시킨다.
'''
import sys
#input=sys.stdin.readline
t=input()
p=input()
T,P=len(t),len(p)
d=[0]*P #pi배열 생성 
j=0
for i in range(1,P):
  while j>0 and p[i]!=p[j]: #값이 다른 경우 d[j-1]로 보내기
    j=d[j-1] #굳이 d[j-1] 인 이유는 비교 가능한 j 이전 최대 인덱스를 찾아줌
    '''근데 사실 모르겠음 j-=1로 바꾸면 50퍼쯤에서 틀림 나중에 아는 사람 있으면 물어보자'''
  if p[i]==p[j]: #같은 경우 둘 다 1 증가하고 j+1 넣기 
    j+=1
    d[i]=j
j=0
c=0
ans=[]
for i in range(T): #t의 처음부터 끝까지 반복
  while j>0 and t[i]!=p[j]: #다른 경우 j를 d[j-1]로 보내기
    j=d[j-1] #j-1까지는 맞았다는 거니까 거기서부터 시작하는 개념
  if t[i]==p[j]: #같은 경우
    if j==P-1: #끝까지 같은 경우 처리해주고 j는 다음 과정을 위해 세팅
      c+=1
      ans.append(i-P+2)
      j=d[j] #전부 맞은 거니까 거기서부터 다시 시작하는 개념
    else: #끝은 아닌 경우 다음 확인 위해 둘 다 1 증가 
      j+=1
print(c)
print(*ans)
